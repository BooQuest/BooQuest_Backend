name: CI/CD (prod)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: cicd-prod-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: booquest-api

env:
  IMAGE_NAME: booquest-prod-api
  CONTAINER_NAME: booquest-api
  APP_PORT: "8080"
  CONFIG_DIR: "/opt/booquest/config"
  DEPLOY_TAG: latest
  NETWORK_NAME: booquest-net

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build JAR (Gradle)
        run: ./gradlew clean bootJar --no-daemon

      - name: Compute tag
        id: meta
        run: echo "SHA7=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Docker build
        run: |
          docker build \
            -t "${{ secrets.REGISTRY_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ env.DEPLOY_TAG }}" \
            -t "${{ secrets.REGISTRY_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.SHA7 }}" \
            .

      - name: Login to NCP registry
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD_PROD }}" | docker login "${{ secrets.REGISTRY_URL_PROD }}" \
            -u "${{ secrets.REGISTRY_USERNAME_PROD }}" --password-stdin

      - name: Push images
        run: |
          docker push "${{ secrets.REGISTRY_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.SHA7 }}"
          docker push "${{ secrets.REGISTRY_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ env.DEPLOY_TAG }}"

      - name: Logout
        if: always()
        run: docker logout "${{ secrets.REGISTRY_URL_PROD }}" || true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on VM via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST_PROD_API }}
          username: ${{ secrets.SSH_USER_PROD }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          # port: ${{ secrets.SSH_PORT }}   # SSH가 22가 아니면 주석 해제
          script: |
            set -euo pipefail
            REG="${{ secrets.REGISTRY_URL_PROD }}"
            IMG="$REG/${{ env.IMAGE_NAME }}:${{ env.DEPLOY_TAG }}"
            CONTAINER="${{ env.CONTAINER_NAME }}"
            APP_PORT="${{ env.APP_PORT }}"
            CONFIG_DIR="${{ env.CONFIG_DIR }}"
            NET="${{ env.NETWORK_NAME }}"

            echo "${{ secrets.REGISTRY_PASSWORD_PROD }}" | docker login "$REG" \
              -u "${{ secrets.REGISTRY_USERNAME_PROD }}" --password-stdin

            docker pull "$IMG"
            docker rm -f "$CONTAINER" 2>/dev/null || true

            docker run -d \
            --name "$CONTAINER" \
            --restart unless-stopped \
            --network "$NET" \
            -v "${CONFIG_DIR}:/app/config" \
            -v /var/lib/booquest/uploads:/var/lib/booquest/uploads:rw \
            --user 1001:1001 \
            --entrypoint java \
            "$IMG" \
            -Dapp.upload.root=/var/lib/booquest/uploads \
            -cp "/app/app.jar:/app/config" \
            org.springframework.boot.loader.launch.JarLauncher

            docker image prune -f
